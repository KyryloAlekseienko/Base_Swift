//–û—Å–Ω–æ–≤–∏
func basicsType() -> Void { 
//–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ —Ç–∞ –∑–º—ñ–Ω–Ω—ñ
//–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç —Ç–∞ –∑–º—ñ–Ω–Ω–∏—Ö
    let maximumNumberOfLoginAttempts = 10
    var currentLoginAttempt = 0
    var x = 0.0, y = 0.0, z = 0.0
    print(maximumNumberOfLoginAttempts, currentLoginAttempt, x, y, z)
//ERROR
//maximumNumberOfLoginAttempts = 11
    currentLoginAttempt = 11
    x = 1.1
    y = 1.1
    z = 1.1
    print(maximumNumberOfLoginAttempts, currentLoginAttempt, x, y, z)

//–ê–Ω–æ—Ç–∞—Ü—ñ—ó —Ç–∏–ø—ñ–≤
    var welcomeMessage: String
    welcomeMessage = "Hello"
    var red, green, blue: Double
    red = 1.0
    green = 0.5
    blue = 0.0
    print(welcomeMessage, red, green, blue)
    
//–Ü–º–µ–Ω—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç —ñ –∑–º—ñ–Ω–Ω–∏—Ö
    let œÄ = 3.14159
    let ‰Ω†Â•Ω = "‰Ω†Â•Ω‰∏ñÁïå"
    let üê∂üêÆ = "dogcow"

    var friendlyWelcome = "Hello!"
    friendlyWelcome = "–í—ñ—Ç–∞—é!"
//–î—Ä—É–∫ –∫–æ–Ω—Å—Ç–∞–Ω—Ç —Ç–∞ –∑–º—ñ–Ω–Ω–∏—Ö
    print(friendlyWelcome)
    print("The current value of friendlyWelcome is \(friendlyWelcome)")
//–ö—Ä–∞–ø–∫–∞ –∑ –∫–æ–º–æ—é
    let cat = "üê±"; print(cat)
//–¶—ñ–ª—ñ —á–∏—Å–ª–∞
//–ú–µ–∂—ñ —Ü—ñ–ª–∏—Ö —á–∏—Å–µ–ª
    let minValue = Int8.min  // minValue –¥–æ—Ä—ñ–≤–Ω—é—î -128, —ñ –º–∞—î —Ç–∏–ø Int8
    let maxValue = Int8.max  // maxValue –¥–æ—Ä—ñ–≤–Ω—é—î 127, —ñ –º–∞—î —Ç–∏–ø Int8
    let minValueU = UInt8.min  // minValue –¥–æ—Ä—ñ–≤–Ω—é—î 0, —ñ –º–∞—î —Ç–∏–ø UInt8
    let maxValueU = UInt8.max  // maxValue –¥–æ—Ä—ñ–≤–Ω—é—î 255, —ñ –º–∞—î —Ç–∏–ø UInt8
    print(minValue, maxValue, minValueU, maxValueU)
//–¢–∏–ø–æ–±–µ–∑–ø–µ—á–Ω—ñ—Å—Ç—å —Ç–∞ –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –¢–∏–ø—ñ–≤
    let meaningOfLife = 42
    // –≤–∏–∑–Ω–∞—á–µ–Ω–æ, —â–æ meaningOfLife –º–∞—Ç–∏–º–µ —Ç–∏–ø Int
    let pi = 3.14159
    // –≤–∏–∑–Ω–∞—á–µ–Ω–æ, —â–æ pi –º–∞—Ç–∏–º–µ —Ç–∏–ø Double
    let anotherPi = 3 + 0.14159
    // anotherPi —Ç–∞–∫–æ–∂ –≤–∏–∑–Ω–∞—á–∞—î—Ç—å—Å—è —è–∫ –∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É Double
    let decimalInteger = 17
    let binaryInteger = 0b10001       // 17 –≤ –¥–≤—ñ–π–∫–æ–≤—ñ–π –Ω–æ—Ç–∞—Ü—ñ—ó
    let octalInteger = 0o21           // 17 —É –≤—ñ—Å—ñ–º–∫–æ–≤—ñ–π –Ω–æ—Ç–∞—Ü—ñ—ó
    let hexadecimalInteger = 0x11     // 17 –≤ —à—ñ—Å—Ç–Ω–∞–¥—Ü—è—Ç–∫–æ–≤—ñ–π –Ω–æ—Ç–∞—Ü—ñ—ó
    let decimalDouble = 12.1875
    let exponentDouble = 1.21875e1
    let hexadecimalDouble = 0xC.3p0
    let paddedDouble = 000123.456
    let oneMillion = 1_000_000
    let justOverOneMillion = 1_000_000.000_000_1
//–ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —á–∏—Å–ª–æ–≤–∏—Ö —Ç–∏–ø—ñ–≤
    let three = 3
    let pointOneFourOneFiveNine = 0.14159
    
    let pi2 = Double(three) + pointOneFourOneFiveNine
    print(pi2)
    // –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ pi –¥–æ—Ä—ñ–≤–Ω—é—î 3.14159, —ñ —ó—ó —Ç–∏–ø –≤–∏–∑–Ω–∞—á–µ–Ω–æ —è–∫ Double

    let integerPi = Int(pi2)
    print(integerPi)
    // –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ integerPi –¥–æ—Ä—ñ–≤–Ω—é—î 3, —ñ —ó—ó —Ç–∏–ø –≤–∏–∑–Ω–∞—á–µ–Ω–æ —è–∫ Int

//–ü—Å–µ–≤–¥–æ–Ω—ñ–º–∏ —Ç–∏–ø—ñ–≤
    typealias AudioSample = UInt16
    var maxAmplitudeFound = AudioSample.min
    print(maxAmplitudeFound)
    // maxAmplitudeFound —Ç–µ–ø–µ—Ä –¥–æ—Ä—ñ–≤–Ω—é—î 0

//–ö–æ—Ä—Ç–µ–∂—ñ
    let http404Error = (404, "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

    // http404Error –º–∞—î —Ç–∏–ø (Int, String), —ñ –¥–æ—Ä—ñ–≤–Ω—é—î (404, "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    let (statusCode, statusMessage) = http404Error

    print("–ö–æ–¥ —Å—Ç–∞–Ω—É –¥–æ—Ä—ñ–≤–Ω—é—î \(statusCode)")

    // –ù–∞–¥—Ä—É–∫—É—î "–ö–æ–¥ —Å—Ç–∞–Ω—É –¥–æ—Ä—ñ–≤–Ω—é—î 404"

    print("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —î \(statusMessage)")

    // –ù–∞–¥—Ä—É–∫—É—î "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —î –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ"

    let (justTheStatusCode, _) = http404Error

    print("–ö–æ–¥ —Å—Ç–∞—Ç—É—Å—É –¥–æ—Ä—ñ–≤–Ω—é—î \(justTheStatusCode)")

    // –ù–∞–¥—Ä—É–∫—É—î "–ö–æ–¥ —Å—Ç–∞—Ç—É—Å—É –¥–æ—Ä—ñ–≤–Ω—é—î 404"

    print("–ö–æ–¥ —Å—Ç–∞—Ç—É—Å—É –¥–æ—Ä—ñ–≤–Ω—é—î \(http404Error.0)")

    // –ù–∞–¥—Ä—É–∫—É—î "–ö–æ–¥ —Å—Ç–∞—Ç—É—Å—É –¥–æ—Ä—ñ–≤–Ω—é—î 404"

    print("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —î \(http404Error.1)")

    // –ù–∞–¥—Ä—É–∫—É—î "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —î –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ"

    let http200Status = (statusCode: 200, description: "OK")

    // –Ø–∫—â–æ –µ–ª–µ–º–µ–Ω—Ç–∏ –∫–æ—Ä—Ç–µ–∂—É —ñ–º–µ–Ω–æ–≤–∞–Ω—ñ,

    // –º–æ–∂–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å —ó—Ö —ñ–º–µ–Ω–∞–º–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ —ó—Ö –∑–Ω–∞—á–µ–Ω—å:

    print("–ö–æ–¥ —Å—Ç–∞—Ç—É—Å—É –¥–æ—Ä—ñ–≤–Ω—é—î \(http200Status.statusCode)")

    // –ù–∞–¥—Ä—É–∫—É—î "–ö–æ–¥ —Å—Ç–∞—Ç—É—Å—É –¥–æ—Ä—ñ–≤–Ω—é—î 200"

    print("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —î \(http200Status.description)")

    // –ù–∞–¥—Ä—É–∫—É—î "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —î OK"

//–û–ø—Ü—ñ–æ–Ω–∞–ª–∏
    let possibleNumber = "123"

    let convertedNumber = Int(possibleNumber)

    // —Ç–∏–ø convertedNumber –≤–∏–∑–Ω–∞—á–µ–Ω–æ —è–∫ "Int?", —Ç–æ–±—Ç–æ "–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π Int"
    var serverResponseCode: Int? = 404

    // serverResponseCode –º—ñ—Å—Ç–∏—Ç—å —Ñ–∞–∫—Ç–∏—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è 404 —Ç–∏–ø—É Int

    serverResponseCode = nil

    // serverResponseCode —Ç–µ–ø–µ—Ä –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –∂–æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è
    var surveyAnswer: String?

//–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è If —Ç–∞ –ü—Ä–∏–º—É—Å–æ–≤–µ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è
    if convertedNumber != nil {

    print("convertedNumber –º—ñ—Å—Ç–∏—Ç—å –¥–µ—è–∫–µ —Ü—ñ–ª–æ—á–∏—Å–µ–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è.")

    }

    // –ù–∞–¥—Ä—É–∫—É—î "convertedNumber –º—ñ—Å—Ç–∏—Ç—å –¥–µ—è–∫–µ —Ü—ñ–ª–æ—á–∏—Å–µ–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è."

    if convertedNumber != nil {

    print("convertedNumber –º–∞—î —Ü—ñ–ª–æ—á–∏—Å–µ–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è \(convertedNumber!).")

    }

    // Prints "convertedNumber –º–∞—î —Ü—ñ–ª–æ—á–∏—Å–µ–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è 123."

    if let actualNumber = Int(possibleNumber) {
        print("\"\(possibleNumber)\" –º–∞—î —Ü—ñ–ª–æ—á–∏—Å–µ–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è \(actualNumber)")
    } else {
        print("\"\(possibleNumber)\" –Ω–µ –º–æ–∂–Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ —É —Ü—ñ–ª–µ —á–∏—Å–ª–æ")
    }
    // –ù–∞–¥—Ä—É–∫—É—î ""123" –º–∞—î —Ü—ñ–ª–æ—á–∏—Å–µ–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è 123"
   
    if let firstNumber = Int("4"), let secondNumber = Int("42"), firstNumber < secondNumber && secondNumber < 100 {
        print("\(firstNumber) < \(secondNumber) < 100")
    }
    // –ù–∞–¥—Ä—É–∫—É—î "4 < 42 < 100"

    if let firstNumber = Int("4") {
        if let secondNumber = Int("42") {
            if firstNumber < secondNumber && secondNumber < 100 {
                print("\(firstNumber) < \(secondNumber) < 100")
            }
        }
    }
    // –ù–∞–¥—Ä—É–∫—É—î "4 < 42 < 100"

    //–û–ø—Ü—ñ–æ–Ω–∞–ª–∏, —â–æ —Ä–æ–∑–≥–æ—Ä—Ç–∞—é—Ç—å—Å—è –Ω–µ—è–≤–Ω–æ
    let possibleString: String? = "–û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π —Ä—è–¥–æ–∫."
    let forcedString: String = possibleString! // –ø–æ—Ç—Ä—ñ–±–µ–Ω –∑–Ω–∞–∫ –æ–∫–ª–∏–∫—É


    let assumedString: String! = "–û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π —Ä—è–¥–æ–∫, —â–æ —Ä–æ–∑–≥–æ—Ä—Ç–∞—î—Ç—å—Å—è –Ω–µ—è–≤–Ω–æ."
    let implicitString: String = assumedString // –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω –∑–Ω–∞–∫ –æ–∫–ª–∏–∫—É

    let optionalString = assumedString
    // –¢–∏–ø–æ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏ optionalString —î "String?", —ñ assumedString –Ω–µ —Ä–æ–∑–≥–æ—Ä—Ç–∞—î—Ç—Å—å—è –ø—Ä–∏–º—É—Å–æ–≤–æ.
    if assumedString != nil {
        print(assumedString!)
    }
    // –ù–∞–¥—Ä—É–∫—É—î "–û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π —Ä—è–¥–æ–∫, —â–æ —Ä–æ–∑–≥–æ—Ä—Ç–∞—î—Ç—å—Å—è –Ω–µ—è–≤–Ω–æ."
    
    if let definiteString = assumedString {
        print(definiteString)
    }

    // –ù–∞–¥—Ä—É–∫—É—î "–û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π —Ä—è–¥–æ–∫, —â–æ —Ä–æ–∑–≥–æ—Ä—Ç–∞—î—Ç—å—Å—è –Ω–µ—è–≤–Ω–æ."

//–ü—Ä–∏–ø—É—â–µ–Ω–Ω—è  [–ó–Ω–µ–≤–∞–¥–∂–µ–Ω–Ω—è] –∑ –ø—Ä–∏–ø—É—â–µ–Ω–Ω—è–º–∏
    let age = -3
    assert(age >= 0, "–í—ñ–∫ –æ—Å–æ–±–∏ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –º–µ–Ω—à–∏–º –≤—ñ–¥ –Ω—É–ª—è")
    // —Ü–µ –ø—Ä–∏–∑–≤–µ–¥–µ –¥–æ –≤–∏–∫–ª–∏–∫—É –ø—Ä–∏–ø—É—â–µ–Ω–Ω—è, –±–æ –≤—ñ–∫ –Ω–µ >= 0
}
//–û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
// func canThrowAnError() throws {
//     // —Ü—è —Ñ—É–Ω–∫—Ü—ñ—è –º–æ–∂–µ –∞–±–æ –≤–∏–∫–∏–Ω—É—Ç–∏ –ø–æ–º–∏–ª–∫—É, –∞–±–æ –≤—ñ–¥–ø—Ä–∞—Ü—é–≤–∞—Ç–∏ —É—Å–ø—ñ—à–Ω–æ.
// }
// func makeASandwich() throws {
//     // ...
// }






//–û—Å–Ω–æ–≤–∏
basicsType()

//–û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
// do {
//     try canThrowAnError()
//     // –ø–æ–º–∏–ª–∫—É –Ω–µ –≤–∏–∫–∏–Ω—É—Ç–æ
// } catch {
//     // –ø–æ–º–∏–ª–∫—É –≤–∏–∫–∏–Ω—É—Ç–æ
// }

// do {
//     try makeASandwich()
//     eatASandwich()
// } catch SandwichError.outOfCleanDishes {
//     washDishes()
// } catch SandwichError.missingIngredients(let ingredients) {
//     buyGroceries(ingredients)
// }